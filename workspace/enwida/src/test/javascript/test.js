// Generated by CoffeeScript 1.6.2
(function() {
  describe("System Test", function() {
    it("Sanity checks", function() {
      expect("me").to.exist;
      return expect(null).not.to.exist;
    });
    return it("Require check", function(done) {
      expect(require).to.exist;
      return require(["generic_chart"], function(GenericChart) {
        expect(GenericChart).to.exist;
        return done();
      });
    });
  });

  describe("Unit tests", function() {
    describe("Resolution calculation", function(desc) {
      var Resolution;

      Resolution = null;
      before(function(done) {
        return require(["resolution"], function(r) {
          Resolution = r;
          return done();
        });
      });
      it("Should always return hourly resolution for carpet plots", function() {
        var res;

        res = Resolution.getOptimalResolution("carpet");
        return expect(res).equals("HOURLY");
      });
      return describe("Sample tests", function() {
        var allResoultions, chartTypes, chartWidth, testSamples;

        allResoultions = ["QUATER_HOURLY", "HOURLY", "DAILY", "WEEKLY", "MONTHLY", "YEARLY"];
        chartTypes = ["line", "bar", "minmax", "posneg"];
        chartWidth = 800;
        testSamples = function(sampleTests) {
          return sampleTests.forEach(function(sampleTest) {
            return it("Should return " + sampleTest.result + " for " + sampleTest.argsDesc, function() {
              var res;

              res = Resolution.getOptimalResolution.apply(Resolution, sampleTest.args);
              return expect(res).equals(sampleTest.result);
            });
          });
        };
        describe("One year time span", function() {
          var expected, sampleTests, timeSpan;

          timeSpan = {
            from: new Date(2010, 0, 1),
            to: new Date(2011, 1, 1)
          };
          expected = "MONTHLY";
          sampleTests = chartTypes.map(function(chartType) {
            return {
              argsDesc: "one year " + chartType + " chart",
              args: [chartType, timeSpan, allResoultions, chartWidth],
              result: expected
            };
          });
          return testSamples(sampleTests);
        });
        describe("One month time span", function() {
          var expected, sampleTests, timeSpan;

          timeSpan = {
            from: new Date(2010, 0, 1),
            to: new Date(2010, 1, 1)
          };
          expected = "DAILY";
          sampleTests = chartTypes.map(function(chartType) {
            return {
              argsDesc: "one month " + chartType + " chart",
              args: [chartType, timeSpan, allResoultions, chartWidth],
              result: expected
            };
          });
          return testSamples(sampleTests);
        });
        describe("One week time span", function() {
          var expected, sampleTests, timeSpan;

          timeSpan = {
            from: new Date(2010, 0, 1),
            to: new Date(2010, 0, 8)
          };
          expected = "DAILY";
          sampleTests = chartTypes.map(function(chartType) {
            return {
              argsDesc: "one week " + chartType + " chart",
              args: [chartType, timeSpan, allResoultions, chartWidth],
              result: expected
            };
          });
          return testSamples(sampleTests);
        });
        describe("One day time span", function() {
          var expected, sampleTests, timeSpan;

          timeSpan = {
            from: new Date(2010, 0, 1),
            to: new Date(2010, 0, 2)
          };
          expected = "HOURLY";
          sampleTests = chartTypes.map(function(chartType) {
            return {
              argsDesc: "one day " + chartType + " chart",
              args: [chartType, timeSpan, allResoultions, chartWidth],
              result: expected
            };
          });
          return testSamples(sampleTests);
        });
        describe("8 hours time span", function() {
          var expected, sampleTests, timeSpan;

          timeSpan = {
            from: new Date(2010, 0, 1),
            to: new Date(2010, 0, 1, 8)
          };
          expected = "QUATER_HOURLY";
          sampleTests = chartTypes.map(function(chartType) {
            return {
              argsDesc: "8 hours " + chartType + " chart",
              args: [chartType, timeSpan, allResoultions, chartWidth],
              result: expected
            };
          });
          return testSamples(sampleTests);
        });
        describe("2 months time span", function() {
          var expected, sampleTests, timeSpan;

          timeSpan = {
            from: new Date(2010, 0, 1),
            to: new Date(2010, 3, 0)
          };
          expected = "WEEKLY";
          sampleTests = chartTypes.map(function(chartType) {
            return {
              argsDesc: "2 months " + chartType + " chart",
              args: [chartType, timeSpan, allResoultions, chartWidth],
              result: expected
            };
          });
          return testSamples(sampleTests);
        });
        return describe("Special checks", function() {
          var sampleTests;

          sampleTests = [
            {
              argsDesc: "one year in a bigger line chart",
              args: [
                "line", {
                  from: new Date(2010, 0, 1),
                  to: new Date(2011, 0, 1)
                }, allResoultions, 1200
              ],
              result: "WEEKLY"
            }, {
              argsDesc: "one month in a bar chart with 3 lines",
              args: [
                "bar", {
                  from: new Date(2010, 0, 1),
                  to: new Date(2010, 1, 1)
                }, allResoultions, 1200, 3
              ],
              result: "WEEKLY"
            }, {
              argsDesc: "one month in a minmax chart with 3 lines (number of lines don't matter)",
              args: [
                "minmax", {
                  from: new Date(2010, 0, 1),
                  to: new Date(2010, 1, 1)
                }, allResoultions, 1200, 3
              ],
              result: "DAILY"
            }
          ];
          return testSamples(sampleTests);
        });
      });
    });
    return describe("Scales", function() {
      var Scale, chartMock, dataMock, isWithin, optionsMock;

      Scale = null;
      before(function(done) {
        return require(["scale"], function(s) {
          Scale = s;
          return done();
        });
      });
      dataMock = [
        [
          {
            x: -5,
            y: -5
          }, {
            x: 0,
            y: 0
          }, {
            x: 5,
            y: 5
          }
        ], [
          {
            x: 50,
            y: 30
          }, {
            x: -20,
            y: 0
          }, {
            x: 5,
            y: 12
          }
        ]
      ];
      optionsMock = {
        width: 500,
        height: 500,
        scale: {
          x: {
            type: "linear"
          },
          y: {
            type: "linear"
          }
        }
      };
      chartMock = {
        options: optionsMock,
        data: dataMock
      };
      isWithin = function(relativeError, expected, value) {
        var error;

        error = Math.abs(relativeError * expected);
        return value >= expected - error && value <= expected + error;
      };
      it("Should setup linear scales with the right domain", function() {
        var chart, maxX, maxY, minX, minY;

        chart = $.extend(true, {}, chartMock);
        Scale.init(chart);
        expect(chart.xScale).exists;
        expect(chart.yScale).exists;
        expect(chart.xScale.range()).deep.equals([0, optionsMock.width]);
        expect(chart.yScale.range()).deep.equals([optionsMock.height, 0]);
        minX = _.chain(dataMock.map(function(dps) {
          return dps.map(function(dp) {
            return dp.x;
          });
        })).flatten().min().value();
        maxX = _.chain(dataMock.map(function(dps) {
          return dps.map(function(dp) {
            return dp.x;
          });
        })).flatten().max().value();
        expect(chart.xScale.domain()).to.have.length(2);
        expect(isWithin(1, minX, chart.xScale.domain()[0])).to.be["true"];
        expect(isWithin(1, maxX, chart.xScale.domain()[1])).to.be["true"];
        minY = _.chain(dataMock.map(function(dps) {
          return dps.map(function(dp) {
            return dp.y;
          });
        })).flatten().min().value();
        maxY = _.chain(dataMock.map(function(dps) {
          return dps.map(function(dp) {
            return dp.y;
          });
        })).flatten().max().value();
        expect(chart.yScale.domain()).to.have.length(2);
        console.log(minY);
        expect(isWithin(1, minY, chart.yScale.domain()[0])).to.be["true"];
        return expect(isWithin(1, maxY, chart.yScale.domain()[1])).to.be["true"];
      });
      it("Should setup an ordinal x scale with the right domain", function() {
        var chart, expectedDomain;

        chart = $.extend(true, {}, chartMock);
        chart.options.scale.x.type = "ordinal";
        Scale.init(chart);
        expect(chart.xScale).exists;
        expectedDomain = _.chain(dataMock.map(function(dps) {
          return dps.map(function(dp) {
            return dp.x;
          });
        })).flatten().uniq().value();
        return expect(chart.xScale.domain()).deep.equals(expectedDomain);
      });
      return it("Should setup a fixed linear x scale", function() {
        var chart;

        chart = $.extend(true, {}, chartMock);
        chart.options.scale.x.type = "linear";
        chart.options.scale.x.domain = {
          type: "fixed",
          low: 10,
          high: 50
        };
        Scale.init(chart);
        expect(chart.xScale).exists;
        return expect(chart.xScale.domain()).deep.equals([10, 50]);
      });
    });
  });

  describe("DOM tests", function() {
    var ChartManager;

    ChartManager = null;
    before(function(done) {
      $("body").prepend($("<div>").addClass("chart").attr("data-chart-id", 0));
      return require(["chart_manager"], function(c) {
        ChartManager = c;
        return done();
      });
    });
    return it("Should setup the chart div", function() {
      var $chart;

      $chart = $(".chart");
      return expect($chart.length).equals(1);
    });
  });

}).call(this);
