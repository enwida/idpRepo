// Generated by CoffeeScript 1.6.2
(function() {
  describe("System Test", function() {
    it("Sanity checks", function() {
      expect("me").to.exist;
      return expect(null).not.to.exist;
    });
    return it("Require check", function(done) {
      expect(require).to.exist;
      return require(["generic_chart"], function(GenericChart) {
        expect(GenericChart).to.exist;
        return done();
      });
    });
  });

  describe("Unit tests", function() {
    return describe("Resolution calculation", function(desc) {
      var Resolution;

      Resolution = null;
      before(function(done) {
        return require(["resolution"], function(r) {
          Resolution = r;
          return done();
        });
      });
      it("Should always return hourly resolution for carpet plots", function() {
        var res;

        res = Resolution.getOptimalResolution("carpet");
        return expect(res).equals("HOURLY");
      });
      return describe("Sample tests", function() {
        var allResoultions, chartTypes, chartWidth, testSamples;

        allResoultions = ["QUATER_HOURLY", "HOURLY", "DAILY", "WEEKLY", "MONTHLY", "YEARLY"];
        chartTypes = ["line", "bar", "minmax", "posneg"];
        chartWidth = 800;
        testSamples = function(sampleTests) {
          return sampleTests.forEach(function(sampleTest) {
            return it("Should return " + sampleTest.result + " for " + sampleTest.argsDesc, function() {
              var res;

              res = Resolution.getOptimalResolution.apply(Resolution, sampleTest.args);
              return expect(res).equals(sampleTest.result);
            });
          });
        };
        describe("One year time span", function() {
          var expected, sampleTests, timeSpan;

          timeSpan = {
            from: new Date(2010, 0, 1),
            to: new Date(2011, 1, 1)
          };
          expected = "MONTHLY";
          sampleTests = chartTypes.map(function(chartType) {
            return {
              argsDesc: "one year " + chartType + " chart",
              args: [chartType, timeSpan, allResoultions, chartWidth],
              result: expected
            };
          });
          return testSamples(sampleTests);
        });
        describe("One month time span", function() {
          var expected, sampleTests, timeSpan;

          timeSpan = {
            from: new Date(2010, 0, 1),
            to: new Date(2010, 1, 1)
          };
          expected = "DAILY";
          sampleTests = chartTypes.map(function(chartType) {
            return {
              argsDesc: "one month " + chartType + " chart",
              args: [chartType, timeSpan, allResoultions, chartWidth],
              result: expected
            };
          });
          return testSamples(sampleTests);
        });
        describe("One week time span", function() {
          var expected, sampleTests, timeSpan;

          timeSpan = {
            from: new Date(2010, 0, 1),
            to: new Date(2010, 0, 8)
          };
          expected = "DAILY";
          sampleTests = chartTypes.map(function(chartType) {
            return {
              argsDesc: "one week " + chartType + " chart",
              args: [chartType, timeSpan, allResoultions, chartWidth],
              result: expected
            };
          });
          return testSamples(sampleTests);
        });
        describe("One day time span", function() {
          var expected, sampleTests, timeSpan;

          timeSpan = {
            from: new Date(2010, 0, 1),
            to: new Date(2010, 0, 2)
          };
          expected = "HOURLY";
          sampleTests = chartTypes.map(function(chartType) {
            return {
              argsDesc: "one day " + chartType + " chart",
              args: [chartType, timeSpan, allResoultions, chartWidth],
              result: expected
            };
          });
          return testSamples(sampleTests);
        });
        describe("8 hours time span", function() {
          var expected, sampleTests, timeSpan;

          timeSpan = {
            from: new Date(2010, 0, 1),
            to: new Date(2010, 0, 1, 8)
          };
          expected = "QUATER_HOURLY";
          sampleTests = chartTypes.map(function(chartType) {
            return {
              argsDesc: "8 hours " + chartType + " chart",
              args: [chartType, timeSpan, allResoultions, chartWidth],
              result: expected
            };
          });
          return testSamples(sampleTests);
        });
        describe("2 months time span", function() {
          var expected, sampleTests, timeSpan;

          timeSpan = {
            from: new Date(2010, 0, 1),
            to: new Date(2010, 3, 0)
          };
          expected = "WEEKLY";
          sampleTests = chartTypes.map(function(chartType) {
            return {
              argsDesc: "2 months " + chartType + " chart",
              args: [chartType, timeSpan, allResoultions, chartWidth],
              result: expected
            };
          });
          return testSamples(sampleTests);
        });
        return describe("Special checks", function() {
          var sampleTests;

          sampleTests = [
            {
              argsDesc: "one year in a bigger line chart",
              args: [
                "line", {
                  from: new Date(2010, 0, 1),
                  to: new Date(2011, 0, 1)
                }, allResoultions, 1200
              ],
              result: "WEEKLY"
            }, {
              argsDesc: "one month in a bar chart with 3 lines",
              args: [
                "bar", {
                  from: new Date(2010, 0, 1),
                  to: new Date(2010, 1, 1)
                }, allResoultions, 1200, 3
              ],
              result: "WEEKLY"
            }, {
              argsDesc: "one month in a minmax chart with 3 lines (number of lines don't matter)",
              args: [
                "minmax", {
                  from: new Date(2010, 0, 1),
                  to: new Date(2010, 1, 1)
                }, allResoultions, 1200, 3
              ],
              result: "DAILY"
            }
          ];
          return testSamples(sampleTests);
        });
      });
    });
  });

}).call(this);
